{
    "Reserved keywords": #a277c7 { 
        "keyword": ["#include", "#define", "#if", "using", "return", "try", "catch"],
        "storage": ["namespace", "template", "int", "void", "class", "private:", "public:", "const"]
    },

    "terminator": #8a7b70 {
        "punctuation.terminator": ";",
        "punctuation.section": "<>it stays as static color () {}",
        "punctuation.separator": "::"
    },

    "function": #3c99a3 {
        "entity.name.function": "normal function",
        "entity.name.function.member": "these functions are part of a class like .begin() in vector class.",
        "support.function": "std::movie() - returns an iterator"
    },

    "operator": #a36933 {
        "keyword.operator": ["<<", "+", "-", "/", "%", "<>", "&&"]
    },

    "string": #a6e3a1 {
        "string": "represents textual data"
    },

    "alias": #ff8686 {
        "using": {
            "entity.name.type": "Alias name when using the 'using' keyword. Note: If an alias is of a class, it becomes a class, so the color will be that of a class."
        }
    },

    "namespace": #f6b26b {
        "entity.name.namespace": "std namespace or whatever you define"
    },

    "class name": #c7c377 {
        "entity.name.type.class": "class Player -> here 'Player' is the entity name",
        "support.class": ["string (an alias of a class)", "vector", "list", "deque (class names under std namespace)"]
    },

    "variable": #ac9e86 {
        "entity.name.type.parameter": "i in template<int i> variable names",
        "variable.parameter": variables that are parameters for a function like car(int a, int b)",
        "variable.other.readwrite": "Objects of a class can be treated as variables in various ways in C++. They can be passed as arguments to functions, returned as values from functions, and operations can be defined for them.",
        "variable": "normal variable names",
        "variable.parameter.function-call": "variables used in function calls"
    },

    "constant": #d6930d {
        "constant.numeric": "123456780 - numeric constants"
    }
}
